import requests
import streamlit as st
import pandas as pd
import os

import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots


# √âchantillon de donn√©es
df_brute = pd.read_csv('data_churn/Customer_Churn.csv')
if not os.path.exists("data_churn/sample_clients.csv"):
    df_sample = df_brute.sample(n=40, random_state=42)
    df_sample.to_csv("data_churn/sample_clients.csv", index=False, header=True)

def main_app():
    # Configuration de la page
    st.set_page_config(page_title="Telco Customer Churn", layout="wide")


    st.sidebar.title("Telco Customer Churn Prediction and Monitoring")
    st.sidebar.write("**Auteur:** M. SYLLA")
    st.sidebar.write("[LinkedIn](https://www.linkedin.com/in/mahamadou-sylla/)")
    
    pages = ['Contexte', 'Test Demo', 'Prediction', 'Monitoring', 'Conclusion']
    selected_page = st.sidebar.radio('Choississez une option:', pages)
    
    # Session state initialization
    if "sample" not in st.session_state:
        st.session_state.sample = None
    if "prediction" not in st.session_state:
        st.session_state.prediction = None

    # Page: Contexte
    if selected_page == 'Contexte':
        st.markdown("""
        #### Probl√©matique : Pourquoi vous perdez vos clients ?
        
        80% des clients quittent l'entreprise dans les 6 mois suivant leur souscription.
        Cela repr√©sente un co√ªt important en termes de revenus perdus et de d√©penses marketing
        pour acqu√©rir de nouveaux clients.
        
        Il est donc crucial de comprendre les raisons de ce churn et d'anticiper les d√©parts pour 
        mettre en place des actions correctives.
        
        Dans ce projet, j'ai d√©cid√© de vous r√©v√©ler les facteurs cl√©s qui influencent le churn 
        des clients et comment les monitorer efficacement.
        """)

    # Page: Test Demo
    elif selected_page == 'Test Demo':
        st.header("Test D√©mo - Pr√©diction sur √©chantillon")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìä Charger un √©chantillon de donn√©es", use_container_width=True):
                st.session_state.sample = pd.read_csv("data_churn/sample_clients.csv")
                st.success("Fichier charg√© avec succ√®s")
                
            if st.session_state.sample is not None:
                st.dataframe(st.session_state.sample.head(6))
                st.info(f"√âchantillon de {len(st.session_state.sample)} clients charg√©")
        
        with col2:
            if st.button("üöÄ Lancer la pr√©diction", use_container_width=True):
                if st.session_state.sample is not None:
                    try:
                        API_URL = "http://localhost:8000/predict"
                        files = {"file": st.session_state.sample.to_csv(index=False).encode("utf-8")}
                        response = requests.post(API_URL, files=files)
                        
                        if response.status_code == 200:
                            response_data = response.json()
                            predictions = response_data["preview"]
                            st.session_state.prediction = pd.DataFrame(predictions)
                            
                            # Afficher le type de pr√©diction
                            if response_data.get("is_global", False):
                                st.success("‚úÖ Pr√©dictions GLOBALES g√©n√©r√©es avec succ√®s")
                            else:
                                st.success("‚úÖ Pr√©dictions d'√âCHANTILLON g√©n√©r√©es avec succ√®s")
                            
                            st.dataframe(st.session_state.prediction.head())
                            
                            # Afficher des informations suppl√©mentaires
                            st.info(f"Nombre de clients pr√©dits: {len(st.session_state.prediction)}")
                            
                        else:
                            st.error(f"Erreur API: {response.status_code}")
                    except Exception as e:
                        st.error(f"Erreur de connexion: {str(e)}")
                else:
                    st.warning("Veuillez charger un √©chantillon avant de lancer la pr√©diction.")

        # Ajouter un bouton pour les pr√©dictions globales
        if st.button("G√©n√©rer des pr√©dictions GLOBALES", use_container_width=True):
            try:
                df_brute = pd.read_csv('data_churn/Customer_Churn.csv')
                API_URL = "http://localhost:8000/predict"
                files = {"file": df_brute.to_csv(index=False).encode("utf-8")}
                response = requests.post(API_URL, files=files)
                
                if response.status_code == 200:
                    st.success("‚úÖ Pr√©dictions GLOBALES g√©n√©r√©es avec succ√®s!")
                    st.info("Le monitoring global utilisera maintenant ces donn√©es compl√®tes")
                else:
                    st.error(f"Erreur lors de la g√©n√©ration des pr√©dictions globales: {response.status_code}")
            except Exception as e:
                st.error(f"Erreur de connexion: {str(e)}")

    # Page: Prediction
    elif selected_page == 'Prediction':
        st.header("Suivi des Pr√©dictions")
        
        if st.button("üîÑ Charger les derni√®res pr√©dictions"):
            try:
                pred_files = [f for f in os.listdir("artifact/predict_data") if f.endswith('.csv')]
                if pred_files:
                    current_file = sorted(pred_files)[-1]
                    st.session_state.prediction = pd.read_csv(f"artifact/predict_data/{current_file}")
                    st.success(f"Pr√©dictions charg√©es: {current_file}")
                else:
                    st.warning("Aucun fichier de pr√©diction trouv√©")
            except Exception as e:
                st.error(f"Erreur lors du chargement: {str(e)}")
        
        if st.session_state.prediction is not None:
            st.dataframe(st.session_state.prediction.head(10))
            
            # Statistiques des pr√©dictions
            if 'prediction' in st.session_state.prediction.columns:
                churn_count = st.session_state.prediction['prediction'].sum()
                total_count = len(st.session_state.prediction)
                churn_rate = (churn_count / total_count) * 100
                
                col1, col2, col3 = st.columns(3)
                col1.metric("Total clients", total_count)
                col2.metric("Churn pr√©dit", churn_count)
                col3.metric("Taux de churn pr√©dit", f"{churn_rate:.1f}%")

    # Page: Monitoring
    elif selected_page == 'Monitoring':
        st.header("Monitoring de la d√©rive de donn√©es")
        
        # Choix du type de monitoring
        monitoring_type = st.radio(
            "Type de monitoring:",
            ["Monitoring Global", "Monitoring sur √âchantillon"],
            horizontal=True,
            key="monitoring_type"
        )
        
        # Initialiser response √† None
        response = None
        response_perf = None
        URL_TARGET_drift = "http://localhost:8000/target-drift"
        API_URL_PREDICT_SAMPLE_DRIFT = "http://localhost:8000/predict-sample-drift"
        URL_PERFORMANCE_METRICS= "http://localhost:8000/performance-metrics"
        try:
            if monitoring_type == "Monitoring Global":
                # Monitoring global - donn√©es compl√®tes
                response = requests.get(URL_TARGET_drift).json()
                response_perf = requests.get(URL_PERFORMANCE_METRICS).json()
                st.success("Monitoring global effectu√© avec succ√®s")
                
            else:
                # Monitoring sur √©chantillon
                if st.session_state.sample is not None:
                    
                    files = {"file": st.session_state.sample.to_csv(index=False).encode("utf-8")}
                    response = requests.post(API_URL_PREDICT_SAMPLE_DRIFT, files=files).json()
                    st.success("Monitoring sur √©chantillon effectu√© avec succ√®s")
                else:
                    st.warning("Veuillez d'abord charger un √©chantillon dans l'onglet 'Test Demo'")
                    return # On stop l'ex√©cution

        except Exception as e:
            st.error(f"Erreur lors du monitoring: {str(e)}")
            st.info("V√©rifiez que l'API FastAPI est en cours d'ex√©cution sur http://localhost:8000")
        
    
                
        if response is not None:
            if monitoring_type == "Monitoring Global":
                # Affichage pour monitoring global
                nb_clients = response.get("nb_clients", 0)
                churn_rate = response.get('churn_rate', 0) * 100
                drift_detected = response.get('target_drift_detected', False)
                drift_score = response.get('drift_score', 0)

        
                col1, col2, col3 = st.columns(3)
                col1.metric("üë• Nombre de clients", f"{nb_clients:,}")
                col2.metric("üìâ Taux de churn", f"{churn_rate:.1f}%")
                col3.metric(
                    "‚öñÔ∏è D√©rive d√©tect√©e", 
                    "‚úÖ Oui" if drift_detected else "‚ùå Non",
                    delta=f"{drift_score:.2f}" if drift_detected else None,
                    delta_color="inverse"
                )

                # perf global
                if response_perf is not None:
                    accuracy = response_perf.get("accuracy", 0)
                    recall = response_perf.get("recall", 0)
                    precision = response_perf.get("precision", 0)
                    f1_score_val = response_perf.get("f1_score", 0)
                    confusion_matrix = response_perf.get('confusion_matrix', [])
                    
                    # Performance model
                    st.subheader("üìä Performance du mod√®le")
                    col1, col2, col3 = st.columns(3)

                    with col1:
                        container = st.container(border=True)
                        with container:
                            st.write("**üìà M√©triques**")
                            st.metric("üéØ Accuracy", f"{accuracy:.3f}")
                            st.metric("üéØ Precision", f"{precision:.3f}")

                    with col2:
                        container = st.container(border=True)
                        with container:
                            st.write("**üìà M√©triques**")
                            st.metric("üéØ Recall", f"{recall:.3f}")
                            st.metric("üéØ F1 Score", f"{f1_score_val:.3f}")

                    with col3:
                        container = st.container(border=True)
                        with container:
                            if confusion_matrix and len(confusion_matrix) == 2 and len(confusion_matrix[0]) == 2:
                                st.write("**üßÆ Matrice de Confusion**")
                                
                                # Cr√©er la heatmap avec Plotly
                                fig = px.imshow(
                                    confusion_matrix,
                                    text_auto=True,
                                    aspect="auto",
                                    x=['Pr√©dit Non', 'Pr√©dit Oui'],
                                    y=['R√©el Non', 'R√©el Oui'],
                                    color_continuous_scale='Blues'
                                )
                                
                                fig.update_layout(
                                    height=170,
                                    margin=dict(l=5, r=5, t=5, b=5),
                                    coloraxis_showscale=False
                                )
                                
                                st.plotly_chart(fig, use_container_width=True)
                            else:
                                st.warning("Matrice non disponible")
                    
            else:
                # Affichage pour monitoring sur √©chantillon
                drift_detected = response.get("drift_detected", False)
                drift_score = response.get("drift_score", 0)
                nb_clients = response.get("nb_clients", 0)
                churn_rate = response.get('churn_rate', 0) * 100

                 # Echantillons
                col1, col2, col3 = st.columns(3)
                col1.metric("üë• Nombre de clients", f"{nb_clients:,}")
                col2.metric("üìâ Taux de churn", f"{churn_rate:.1f}%")
                col3.metric(
                    "‚öñÔ∏è D√©rive d√©tect√©e", 
                    "‚úÖ Oui" if drift_detected else "‚ùå Non",
                    delta=f"{drift_score:.2f}" if drift_detected else None,
                    delta_color="inverse"
                )
  

            # Visualisations
            st.subheader("Distribution du Churn")
            fig = make_subplots(rows=1, cols=2, specs=[[{"type": "pie"}, {"type": "bar"}]])
            
            # Pie chart
            churn_data = response.get('churn_distribution', {'Oui': 375, 'Non': 1125})
            #print(churn_data)
            fig.add_trace(go.Pie(
                labels=list(churn_data.keys()),
                values=list(churn_data.values()),
                name="R√©partition"
            ), 1, 1)
            
            # Bar chart
            fig.add_trace(go.Bar(
                x=list(churn_data.keys()),
                y=list(churn_data.values()),
                marker_color=['red', 'green'],
                name="Distribution"
            ), 1, 2)
            
            fig.update_layout(height=400, showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
            
            # Features importantes
            st.subheader("Analyse des variables importantes")
            
            features_data = response.get('important_features', {})
            if features_data:
                fig_features = go.Figure()
                
                for feature, values in features_data.items():
                    if isinstance(values, dict) and 'reference' in values and 'current' in values:
                        fig_features.add_trace(go.Scatter(
                            x=list(range(len(values['reference']))),
                            y=values['reference'],
                            name=f"{feature} (Ref)",
                            line=dict(dash='dash')
                        ))
                        fig_features.add_trace(go.Scatter(
                            x=list(range(len(values['current']))),
                            y=values['current'],
                            name=f"{feature} (Actuel)"
                        ))
                
                fig_features.update_layout(
                    title="Distribution des features importantes",
                    xaxis_title="Index",
                    yaxis_title="Valeur"
                )
                st.plotly_chart(fig_features, use_container_width=True)
            
                # Recommandations
                st.subheader("Recommandations")
                if drift_detected:
                    st.error("""
                    ‚ö†Ô∏è **Alerte : D√©rive d√©tect√©e**
                    - V√©rifier la qualit√© des donn√©es d'entr√©e
                    - Recalibrer le mod√®le si n√©cessaire
                    - Analyser les changements dans le comportement des clients
                    """)
                else:
                    st.success("""
                    ‚úÖ **Statut stable**
                    - Aucune d√©rive significative d√©tect√©e
                    - Le mod√®le performe de mani√®re coh√©rente
                    - Continuer le monitoring r√©gulier
                    """)

            else:
                if monitoring_type == "Monitoring sur √âchantillon" and st.session_state.sample is None:
                    pass
                else:
                    st.info("S√©lectionnez un type de monitoring et cliquez pour lancer l'analyse")
        # page conclusion         
    elif selected_page == 'Conclusion':
        st.header("Conclusion")
        st.markdown("""
        ### Insights cl√©s
        
        - **Taux de churn moyen**: 26% des clients quittent le service dans le cas g√©n√©ral.
        - **Facteurs d√©clencheurs**: Anciennet√©, type de service internet, charges mensuelles, Charges Totales
        - **Recommandations**:
          - Programmes de fid√©lisation pour les clients √† risque (Promotion, revision de contrat, etc)
          - Offres personnalis√©es pour les clients fibre optique
          - Surveillance continue de la d√©rive des donn√©es pour detecter plut√¥t les clients sur la pente de decrochage.
    """)

if __name__ == '__main__':
    main_app()