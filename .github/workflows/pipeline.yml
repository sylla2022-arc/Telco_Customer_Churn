name: Telco Customer Churn Prediction and Monitoring

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

  build-and-push-ecr-images:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ secrets.AWS_REGION }} 
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -t ${{secrets.AWS_ECR_LOGIN_URL}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest .
          docker push ${{secrets.AWS_ECR_LOGIN_URL}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-images
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull latest Docker image
        run: |
          docker pull ${{secrets.AWS_ECR_LOGIN_URL}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Stop and remove existing containers
        run: |
          docker stop telco_api telco_streamlit || true
          docker rm telco_api telco_streamlit || true

      - name: Deploy FastAPI container
        run: |
          docker run -d \
            --name telco_api \
            -p 8000:8000 \
            -e AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e AWS_REGION='${{ secrets.AWS_REGION }}' \
            ${{secrets.AWS_ECR_LOGIN_URL}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest \
            uvicorn app:app --host 0.0.0.0 --port 8000

      - name: Deploy Streamlit container
        run: |
          docker run -d \
            --name telco_streamlit \
            -p 8501:8501 \
            -e AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e AWS_REGION='${{ secrets.AWS_REGION }}' \
            --link telco_api:api \
            ${{secrets.AWS_ECR_LOGIN_URL}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest \
            streamlit run app_streamlit.py --server.address=0.0.0.0 --server.port=8501

      - name: Verify deployment
        run: |
          docker ps
          echo "FastAPI: http://$(curl -s ifconfig.me):8000"
          echo "Streamlit: http://$(curl -s ifconfig.me):8501"